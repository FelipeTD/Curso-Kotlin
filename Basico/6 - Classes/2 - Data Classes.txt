Data classes﻿
Kotlin has data classes which are particularly useful for storing data. 
Data classes have the same functionality as classes, but they come automatically with additional member functions. 
These member functions allow you to easily print the instance to readable output, compare instances of a class, copy instances, and more. 
As these functions are automatically available, you don't have to spend time writing the same boilerplate code for each of your classes.

To declare a data class, use the keyword data:

data class User(val name: String, val id: Int)
The most useful predefined member functions of data classes are:

Function		Description
.toString()		Prints a readable string of the class instance and its properties.
.equals() or ==		Compares instances of a class.
.copy()			Creates a class instance by copying another, potentially with some different properties.

Print as string﻿
To print a readable string of a class instance, you can explicitly call the .toString() function, or use print functions (println() and print()) which automatically call .toString() for you:

data class User(val name: String, val id: Int)

fun main() {
    val user = User("Alex", 1)
    
    // Automatically uses toString() function so that output is easy to read
    println(user)            
    // User(name=Alex, id=1)

}

This is particularly useful when debugging or creating logs.

Compare instances﻿
To compare data class instances, use the equality operator ==:

data class User(val name: String, val id: Int)

fun main() {
    val user = User("Alex", 1)
    val secondUser = User("Alex", 1)
    val thirdUser = User("Max", 2)

    // Compares user to second user
    println("user == secondUser: ${user == secondUser}") 
    // user == secondUser: true

    // Compares user to third user
    println("user == thirdUser: ${user == thirdUser}")   
    // user == thirdUser: false

}

Copy instance﻿
To create an exact copy of a data class instance, call the .copy() function on the instance.

To create a copy of a data class instance and change some properties, call the .copy() function on the instance and add replacement values for properties as function parameters.

For example:

data class User(val name: String, val id: Int)

fun main() {
    val user = User("Alex", 1)
    val secondUser = User("Alex", 1)
    val thirdUser = User("Max", 2)

    // Creates an exact copy of user
    println(user.copy())       
    // User(name=Alex, id=1)

    // Creates a copy of user with name: "Max"
    println(user.copy("Max"))  
    // User(name=Max, id=1)

    // Creates a copy of user with id: 3
    println(user.copy(id = 3)) 
    // User(name=Alex, id=3)

}

Creating a copy of an instance is safer than modifying the original instance because any code that relies on the original instance isn't affected by the copy and what you do with it.

























